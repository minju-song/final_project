<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.holoyolo.app.accBookHistory.mapper.AccBookHistoryMapper">
  
	  <select id="test" parameterType="AccBookHistoryVO">
	  	SELECT * FROM ACC_BOOK_HISTORY WHERE AB_HISTORY_ID = #{abHistoryId}
	  </select>
  
  		<!-- api통해서 거래내역 자동 등록 -->
	  <insert id="insertAcc" parameterType="AccBookHistoryVO">
	  	<selectKey keyProperty="abHistoryId"
					   resultType="int"
					   order="BEFORE">
	  		SELECT NVL(MAX(ab_history_id),0) + 1
				FROM acc_book_history
	  	</selectKey>
	  	
	  	INSERT INTO acc_book_history
	  		VALUES
		  		(
		  			#{abHistoryId}
		  			, #{payDate}
		  			, #{inputOutput}
		  			, #{paymentType}
		  			, #{bankname}
		  			, #{price}
		  			, #{payStore}
		  			, null
		  			, #{memberId}
		  		)
		  
	  </insert>
  
  	<!-- 가장 최근 거래내역 날짜 -->
	  <select id="getLatestPayDate" resultType="String">
			SELECT NVL(
			    (SELECT MAX(pay_date) FROM acc_book_history WHERE member_id = #{memberId}),
			    (SELECT setting_date  - INTERVAL '1' DAY from member_finance_info WHERE member_id = #{memberId} AND use_yn = 'Y')
			) AS latest_pay_date
			FROM dual
	  </select>
	  
	  <!-- 해당 날짜 거래내역 불러오기 -->
	  <select id="getAccHistory" resultType="AccBookHistoryVO">
	  	SELECT * 
	  	FROM acc_book_history 
	  	WHERE TRUNC(pay_date) = #{payDate} 
	  	AND member_id = #{memberId}
	  	ORDER BY ab_history_id
	  </select>
	  
	  <!-- 해당 날짜 총 소비금액 -->
	  <select id="getSumPrice" resultType="int" parameterType="AccBookHistoryVO">
	  	SELECT NVL(SUM(price),0) 
	  	FROM acc_book_history 
	  	WHERE member_id = #{memberId} 
	  	AND trunc(pay_date) = trunc(#{payDate}) 
	  	AND input_output='GB2'
	  </select>
	  
	  <!-- 해당 날짜 총 소득금액 -->
	  <select id="getSumInputPrice" resultType="int" parameterType="AccBookHistoryVO">
	  	SELECT NVL(SUM(price),0) 
	  	FROM acc_book_history 
	  	WHERE member_id = #{memberId} 
	  	AND trunc(pay_date) = trunc(#{payDate}) 
	  	AND input_output='GB1'

	  </select>
	  
	  <!-- 해당 월 총 소비금액 -->
	  <select id="getMonthPrice" parameterType="AccBookHistoryVO" resultType="int">
        SELECT NVL(SUM(price),0)
        FROM acc_book_history
        WHERE pay_date
        BETWEEN (TO_CHAR(TRUNC(#{payDate},'MM'),'YYYY-MM-DD')) AND (TO_CHAR(LAST_DAY(#{payDate}),'YYYY-MM-DD'))
        AND member_id = #{memberId}
	  </select>
	  
	  <!-- 삭제 -->
	  <delete id="deleteHistory" parameterType="AccBookHistoryVO">
	  	DELETE acc_book_history 
	  	WHERE ab_history_id = #{abHistoryId}
	  </delete>
	  
	  <!-- 방금 넣은 거래내역 아이디 가져오기 -->
	  <select id="selectCurrent" resultType="int">
	  	SELECT MAX(ab_history_id) 
	  	FROM acc_book_history 
	  	WHERE member_id = #{memberId}
	  </select>
	  
	  <!-- 마이페이지 차트용 쿼리(현금) -->
	  <select id="selectChartData" resultType="AccBookHistoryVO">
	  	SELECT  TO_CHAR(b.dt, 'YYYY-MM') AS pay_date_month
		        , SUM(CASE input_output WHEN 'GB1' THEN  price ELSE 0 END) input_sum
		        , SUM(CASE input_output WHEN 'GB1' THEN  0 ELSE NVL(price,0) END) output_sum
		        , SUM(CASE input_output WHEN 'GB1' THEN  price ELSE NVL(price,0) * -1 END) input_output_sum
		FROM    (SELECT TRUNC(pay_date, 'MM') pay_date
		                , input_output
		                , price
		        FROM acc_book_history
		        WHERE member_id = #{memberId}
		        AND payment_type = #{paymentType}
		        AND TRUNC(pay_date) > LAST_DAY(ADD_MONTHS(TRUNC(sysdate, 'MM'),-12))) a
		        ,
		        (SELECT ADD_MONTHS(TRUNC(sysdate,'MM'),-11) + LEVEL - 1 AS dt
		         FROM dual 
		         CONNECT BY LEVEL <![CDATA[<=]]> (TRUNC(sysdate) - ADD_MONTHS(TRUNC(sysdate, 'MM'),-11))) b
		WHERE b.dt = a.pay_date(+)
		GROUP BY TO_CHAR(b.dt, 'YYYY-MM')
		ORDER BY TO_CHAR(b.dt, 'YYYY-MM')
	  </select>
	  
  </mapper>